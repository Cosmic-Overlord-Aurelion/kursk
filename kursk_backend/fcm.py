import firebase_admin
from firebase_admin import credentials, messaging
from django.contrib.auth.models import User
from api.models import FCMToken, PushNotificationSetting
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import status
from rest_framework.permissions import IsAuthenticated
from rest_framework.serializers import Serializer, CharField
import logging

logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase (–æ–¥–∏–Ω —Ä–∞–∑)
if not firebase_admin._apps:
    cred = credentials.Certificate("firebase-credentials.json")
    firebase_admin.initialize_app(cred)


def send_push_notification(token: str, title: str, body: str, data: dict = None):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–¥–Ω–æ–º—É –ø–æ–ª—É—á–∞—Ç–µ–ª—é.
    :param token: FCM-—Ç–æ–∫–µ–Ω —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    :param title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    :param body: –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    :param data: –î–æ–ø. –¥–∞–Ω–Ω—ã–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, event_id)
    """
    message = messaging.Message(
        notification=messaging.Notification(
            title=title,
            body=body,
        ),
        token=token,
        data=data or {}  # –í—Å–µ–≥–¥–∞ —Å–ª–æ–≤–∞—Ä—å, –¥–∞–∂–µ –µ—Å–ª–∏ –ø—É—Å—Ç–æ–π
    )
    try:
        response = messaging.send(message)
        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {response}")
        return response
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
        return None


def send_push_if_allowed(user: User, notif_type: str, title: str, body: str, data: dict = None):
    # –ö–∞—Ä—Ç–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
    category_map = {
        'event_joined': 'events',
        'event_left': 'events',
        'event_comment': 'events',
        'event_comment_reply': 'events',
        'event_submitted': 'moderation',
        'event_approved': 'moderation',
        'event_rejected': 'moderation',
        'comment_liked': 'likes_comments',
        'event_reminder': 'events',
        'new_message': 'messages',  # ‚úÖ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    }

    category = category_map.get(notif_type)
    if not category:
        logger.warning(f"‚ö†Ô∏è –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è '{notif_type}' –Ω–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π.")
        return

    settings = getattr(user, 'push_settings', None)
    if settings is None or not getattr(settings, category, False):
        logger.info(f"üîï Push –æ—Ç–∫–ª—é—á—ë–Ω –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username}")
        return

    token_obj = FCMToken.objects.filter(user=user).last()
    if not token_obj:
        logger.warning(f"‚ö†Ô∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username} –Ω–µ—Ç FCM-—Ç–æ–∫–µ–Ω–∞.")
        return

    try:
        response = send_push_notification(token_obj.token, title, body, data)
        logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.username}: {response}")
        return response
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.username}: {e}")
        return None


# –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è FCM-—Ç–æ–∫–µ–Ω–∞
class FcmTokenSerializer(Serializer):
    token = CharField(max_length=255)


# API –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ FCM-—Ç–æ–∫–µ–Ω–∞
class RegisterFcmTokenView(APIView):
    permission_classes = [IsAuthenticated]

    def post(self, request):
        serializer = FcmTokenSerializer(data=request.data)
        if not serializer.is_valid():
            logger.warning(f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è FCM-—Ç–æ–∫–µ–Ω–∞: {serializer.errors}")
            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

        token = serializer.validated_data['token']
        user = request.user

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–æ–∫–µ–Ω
            fcm_token, created = FCMToken.objects.get_or_create(token=token)
            if not created:
                # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if fcm_token.user != user:
                    old_user = fcm_token.user
                    fcm_token.user = user
                    fcm_token.save()
                    logger.info(f"‚ÑπÔ∏è –¢–æ–∫–µ–Ω {token} –ø–µ—Ä–µ–ø—Ä–∏–≤—è–∑–∞–Ω –æ—Ç {old_user.username if old_user else '–Ω–∏–∫–æ–≥–æ'} –∫ {user.username}")
                    return Response(
                        {"message": "Token reassigned to current user"},
                        status=status.HTTP_200_OK
                    )
                logger.info(f"‚ÑπÔ∏è –¢–æ–∫–µ–Ω {token} —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è {user.username}")
                return Response(
                    {"message": "Token already registered for this user"},
                    status=status.HTTP_200_OK
                )

            # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–æ–≤—ã–π, –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            fcm_token.user = user
            fcm_token.save()
            logger.info(f"‚úÖ –¢–æ–∫–µ–Ω {token} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è {user.username}")
            return Response(
                {"message": "Token registered successfully"},
                status=status.HTTP_201_CREATED
            )

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞ {token} –¥–ª—è {user.username}: {e}")
            return Response(
                {"error": str(e)},
                status=status.HTTP_500_INTERNAL_SERVER_ERROR
            )
